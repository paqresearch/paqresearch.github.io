[["intro.html", "Wiki práce s R v PAQ 1 Co tu najdeš", " Wiki práce s R v PAQ PAQ Research datalidi 2022-09-29 1 Co tu najdeš V téhle on-line knize dáváme pomocí R balíku bookdown dohromady všechny: informace o funkcích v balíku paqr procesy práce s daty v PAQ příslušná školení Najdi si téma, které hledáš v obsahu nalevo. "],["paqr.html", "2 Balík paqr 2.1 Instalace 2.2 Frekvenční tabulka tab", " 2 Balík paqr paqr je náš vlastní R balík, který vyvíjíme v PAQ Research. Obsahuje funkce určené pro naše specifické potřeby. Nejedná se o náhradu jiných balíků, ty stále používáme – paqr je jen doplňuje. Funkce v paqr se zaměřují hlavně na: Standardní proces čištění dat + práce s codebookem v SPSS Kontroly a explorace dat během čištění Práce s tabulkovačem a vážením z R skriptu 2.1 Instalace 2.1.1 První instalace Cokoliv už máš z dřívějška, přeskoč Nevíš-li, jak něco udělat, poradí ti Michal K. nebo Michal Š. Vytvoř si profil na https://github.com Požádej na Slacku @michal o přístup do https://github.com/paqresearch Vytvoř si GitHub token na: https://github.com/settings/tokensv (dále jen tvuj_token – někam si ho ulož) Zjisti si, kde máš Rkovou Default working directory Ulož si do ní plain-text soubor zvaný .Rprofile Do .Rprofile přidej Sys.setenv(GITHUB_PAT = tvuj_token) Otevři si novou R session Spusť kód source(&quot;g:/Sdílené disky/07_NASTROJE/paqr_install.R&quot;, encoding = &quot;UTF-8&quot;) 2.1.2 Aktualizace Spusť v R kód source(&quot;g:/Sdílené disky/07_NASTROJE/paqr_install.R&quot;, encoding = &quot;UTF-8&quot;) 2.2 Frekvenční tabulka tab Funkce tab() vygeneruje formátovanou frekvenční tabulku. "],["skoleni_zakladyR.html", "3 Základy R 3.1 Orientace v RStudio 3.2 Základní příkazy v R 3.3 Jak vypadají data v R 3.4 Načtení dat 3.5 Ukládání dat", " 3 Základy R Shrnutí obecných základů práce s R pro úplné začátečníky Text předpokládá práci v RStudio. 3.1 Orientace v RStudio 3.1.1 Rozdíl mezi R a RStudio R je programovací jazyk. Kdybychom si zapnuli jen R, zobrazí se nám prázdná příkazová řádka, která bude čekat na naše příkazy. RStudio je GUI (graphical user interface), které nám usnadňuje s R pracovat. 3.1.2 Rozdíl mezi Console a Source Když máš zapnuté RStudio, tak zároveň s ním běží na pozadí zapnutá R “Session”. Základní informace o ní zjistíš příkazem sessionInfo() Celá tahle R Session se ti zobrazuje vlevo dole v okně Console, do kterého můžeš i přímo psát příkazy. Vlevo nahoře naopak vidíš okno Source, tedy zdrojový kód. Tam máš většinou otevřený nějaký R script, tedy textový soubor s příponou .R. (Pokud znáš SPSS, tak je to podobné souboru Syntax.) Části zdrojového kódu můžeš spustit (zkratka Ctrl + Enter). Když máš kurzor umístěný v nějaké funkci, spustí se celá funkce. Pokud máš označenou část skriptu, spustí se právě ta část kódu, kterou máš označenou (i kdyby nedávala smysl). R skripty ukládáme, verzujeme, a jsou tím místem kde “The code lives”. 3.2 Základní příkazy v R 3.2.1 Jednoduché výpočty v R Když do R píšeme matematické příkazy, funguje podobně jako kalkulačka. 1 + 1 ## [1] 2 sqrt(2 + 2) ## [1] 2 factorial(50) ## [1] 3.041409e+64 Když nevím, co některá funkce (jako např. tady factorial()) dělá, podívám se “do helpu”. To udělám buďto umístěním kurzoru do názvu funkce a stiskem F1, funkcí help() nebo ?. Help se mi defaultně zobrazí v RStudio okně vpravo dole v záložce Help. 3.2.2 Přiřazování objektů Hodnoty nemusím vždycky explicitně vypočítávát, můžu si je uložit jako objekty do aktuálního prostředí (environment). To udělám pomocí symbolu &lt;- (assignment operator), který v RStudio snadno napíšu klávesovou zkratkou Alt + -. Pokud chci např. objektu a přiřadit číselnou hodnotu 2, udělám to takhle: a &lt;- 2 Jako objekt ale můžu přiřadit v podstatě cokoliv, třeba vektor několika hodnot. Jendoduchým způsobem vytvoření vektoru je funkce c(), neboli combine. Teď přiřadíme objektu x numerický vektor s 5 různými hodnotami. Funkci length() použijeme, pokud chceme zjistit, kolik prvků vektor má. x &lt;- c(-1, 5, 3, 4, 2) length(x) ## [1] 5 Oba objekty (a i x) by teď měly být zobrazené v RStudiu vpravo nahoře v záložce Environment. Díky tomu, že jsou uložené v environmentu, si je můžeme jednoduše zavolat a dostaneme tím jejich hodnoty. a ## [1] 2 x ## [1] -1 5 3 4 2 Námi přiřazené objekty můžeme používat v příkazech nebo funkcích. Všimni si, co se stane, když hodnotu a sečteme nebo vynásobíme s vektorem x. a + x ## [1] 1 7 5 6 4 a * x ## [1] -2 10 6 8 4 Kromě numerických děláme v R i logické operace. x ## [1] -1 5 3 4 2 x &lt;= 2 ## [1] TRUE FALSE FALSE FALSE TRUE x &gt; 0 &amp; x != 3 ## [1] FALSE TRUE FALSE TRUE TRUE O vektoru si můžeme jednoduše zjistit i jeho popisné statistiky min(x) ## [1] -1 max(x) ## [1] 5 mean(x) ## [1] 2.6 3.2.3 Dataset – příklad na reálných datech R obsahuje automaticky načtené příkladové datasety, na kterých je možné si testovat funkce a skripty. Datasety se importují z balíku datasets a jejich seznam je dostupný spuštěním funkce data(). Další balíky v sobě mohou obsahovat své vlastní datasety (na internetu často uvidíte např. datasety iris nebo mtcars z balíku dplyr). Pro tento příklad budeme používat dataset swiss z balíku datasets. Ten je importován automaticky, takže si ho můžeme rovnou zavolat. I datasety mohou mít vlastní help – opět dostupný přes ?swiss. Když spustíme pouze příkaz swiss, v konzoli se zobrazí celý dataset. To může být (zvlášť u velkých datasetů) nepřehledné. Proto existují různé přehledové funkce, z nichž si některé zkusíme. Pokud chci dataset zobrazit přímo v tabulkovém formátu, použiju příkaz View(swiss). Připravujeme Add-on dataViewer, který to umožní ještě o něco lépe. 3.2.3.1 Vlastnosti datasetu Některé funkce nás informují o obsahu datasetu: colnames(swiss) # názvy sloupců v datasetu ## [1] &quot;Fertility&quot; &quot;Agriculture&quot; &quot;Examination&quot; &quot;Education&quot; ## [5] &quot;Catholic&quot; &quot;Infant.Mortality&quot; head(swiss) # zobrazí prvních šest řádků, z druhého konce funguje tail() ## Fertility Agriculture Examination Education Catholic ## Courtelary 80.2 17.0 15 12 9.96 ## Delemont 83.1 45.1 6 9 84.84 ## Franches-Mnt 92.5 39.7 5 5 93.40 ## Moutier 85.8 36.5 12 7 33.77 ## Neuveville 76.9 43.5 17 15 5.16 ## Porrentruy 76.1 35.3 9 7 90.57 ## Infant.Mortality ## Courtelary 22.2 ## Delemont 22.2 ## Franches-Mnt 20.2 ## Moutier 20.3 ## Neuveville 20.6 ## Porrentruy 26.6 summary(swiss) # shrnutí popisných statistik jednotlivých proměnných ## Fertility Agriculture Examination Education ## Min. :35.00 Min. : 1.20 Min. : 3.00 Min. : 1.00 ## 1st Qu.:64.70 1st Qu.:35.90 1st Qu.:12.00 1st Qu.: 6.00 ## Median :70.40 Median :54.10 Median :16.00 Median : 8.00 ## Mean :70.14 Mean :50.66 Mean :16.49 Mean :10.98 ## 3rd Qu.:78.45 3rd Qu.:67.65 3rd Qu.:22.00 3rd Qu.:12.00 ## Max. :92.50 Max. :89.70 Max. :37.00 Max. :53.00 ## Catholic Infant.Mortality ## Min. : 2.150 Min. :10.80 ## 1st Qu.: 5.195 1st Qu.:18.15 ## Median : 15.140 Median :20.00 ## Mean : 41.144 Mean :19.94 ## 3rd Qu.: 93.125 3rd Qu.:21.70 ## Max. :100.000 Max. :26.60 Některé o formě / struktuře: nrow(swiss) # počet řádků datasetu ## [1] 47 ncol(swiss) #počet sloupců datasetu ## [1] 6 str(swiss) # struktura objektu ## &#39;data.frame&#39;: 47 obs. of 6 variables: ## $ Fertility : num 80.2 83.1 92.5 85.8 76.9 76.1 83.8 92.4 82.4 82.9 ... ## $ Agriculture : num 17 45.1 39.7 36.5 43.5 35.3 70.2 67.8 53.3 45.2 ... ## $ Examination : int 15 6 5 12 17 9 16 14 12 16 ... ## $ Education : int 12 9 5 7 15 7 7 8 7 13 ... ## $ Catholic : num 9.96 84.84 93.4 33.77 5.16 ... ## $ Infant.Mortality: num 22.2 22.2 20.2 20.3 20.6 26.6 23.6 24.9 21 24.4 ... 3.2.3.2 Získání podmnožin datasetu Získat prvky nebo podmnožiny datasetů nám umožňují: hranaté závorky [] dolar $ (Alt + 036, nebo Right Alt + 3 na QWERTY) Vybírat můžeme podle pozice v logice [řádek, sloupec] swiss[2, 3] ## [1] 6 swiss[2,] ## Fertility Agriculture Examination Education Catholic Infant.Mortality ## Delemont 83.1 45.1 6 9 84.84 22.2 swiss[,3] ## [1] 15 6 5 12 17 9 16 14 12 16 14 21 14 19 22 18 17 26 31 19 22 14 22 20 12 ## [26] 14 6 16 25 15 3 7 5 12 7 9 3 13 26 29 22 35 15 25 37 16 22 Nebo podle názvů swiss$Fertility #výběr sloupce dolarem ## [1] 80.2 83.1 92.5 85.8 76.9 76.1 83.8 92.4 82.4 82.9 87.1 64.1 66.9 68.9 61.7 ## [16] 68.3 71.7 55.7 54.3 65.1 65.5 65.0 56.6 57.4 72.5 74.2 72.0 60.5 58.3 65.4 ## [31] 75.5 69.3 77.3 70.5 79.4 65.0 92.2 79.3 70.4 65.7 72.7 64.4 77.6 67.6 35.0 ## [46] 44.7 42.8 swiss[, &quot;Fertility&quot;] # výběr sloupce názvem ## [1] 80.2 83.1 92.5 85.8 76.9 76.1 83.8 92.4 82.4 82.9 87.1 64.1 66.9 68.9 61.7 ## [16] 68.3 71.7 55.7 54.3 65.1 65.5 65.0 56.6 57.4 72.5 74.2 72.0 60.5 58.3 65.4 ## [31] 75.5 69.3 77.3 70.5 79.4 65.0 92.2 79.3 70.4 65.7 72.7 64.4 77.6 67.6 35.0 ## [46] 44.7 42.8 swiss[&quot;Moutier&quot;, &quot;Fertility&quot;] # ## [1] 85.8 Pozor, pokud pracuješ s datasety formátu tibble (velmi časté při práci s dplyr), fungují hranaté závorky trochu jinak. Bude popsáno u dplyr. 3.2.4 Testovací příklady V které švýcarské oblasti byla největší plodnost? r_max&lt;-which.max(swiss$Fertility) swiss[r_max,] ## Fertility Agriculture Examination Education Catholic ## Franches-Mnt 92.5 39.7 5 5 93.4 ## Infant.Mortality ## Franches-Mnt 20.2 rownames(swiss)[r_max] ## [1] &quot;Franches-Mnt&quot; Spočítej průměrnou plodnost v oblastech, kde procento mužů pracujících v zemědělství je vyšší než 50 %. mean(swiss[swiss$Agriculture &gt; 50, &quot;Fertility&quot;]) ## [1] 72.03462 Spočítej, v kolika oblastech Švýcarska je procento katolíků vyšší než 75 %. sum(swiss$Catholic &gt; 75) ## [1] 16 nrow(swiss[swiss$Catholic &gt; 75, ]) ## [1] 16 3.3 Jak vypadají data v R 3.3.1 Datové třídy (výběr základních) Každý objekt v datech má nějakou třídu. Datovou třídu objektu získáš funkcí class(). Tříd je daleko víc, ale nejzákladnější jsou numeric, character a logical. class(23) #numeric ## [1] &quot;numeric&quot; class(&quot;hello&quot;) #character ## [1] &quot;character&quot; class(&quot;23&quot;) ## [1] &quot;character&quot; class(TRUE) #logical ## [1] &quot;logical&quot; class(T) ## [1] &quot;logical&quot; class(5 &gt; 8) ## [1] &quot;logical&quot; Pozor na vztah character stringů a čísel, pokud chci něco zadat jako string, musí to být označené jako string (uvozovkami). Převádět mezi třídami můžu většinou funkcemi začínajícími as., třeba as.numeric() nebo as.character(). S čím si R bude vědět rady, to převede, s čím ne, tam hodí NA. Po převodech typů je vždy dobré si výsledek zkontrolovat. text23 &lt;- &quot;23&quot; cislo23 &lt;- as.numeric(text23) class(cislo23) ## [1] &quot;numeric&quot; Často používanou a o něco složitější datovou třídou je factor, o kterém ještě bude řeč dále. Úplně speciální datovou třídou je labelled, se kterou se nejčastěji setkáš po importu dat z souborů .sav pomocí balíku haven. Až na to bude kapitola, tak to tu odkážem. 3.3.2 Datové struktury (výběr základních) Zatímco datové třídy definují, jak se k obsahu dat R chová, datové struktury definují, jak jsou data v R uspořádána. vektor (vector) datová tabulka (data.frame) seznam (list) dobré vědět: - tibble – typ data framu, která se používá v balíku dplyr (a dalších balících z tidyverse) 3.3.2.1 Jak pochopit datové struktury v R Jednodušší Nejmenší prvek je jedna hodnota (value). Každá value má nějakou datovou třídu. class(&quot;a&quot;) ## [1] &quot;character&quot; Když zkombinuju několik hodnot stejné třídy, dostanu vektor 1 rozměr: length(), délka, tedy počet prvků vektor01 &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) vektor02 &lt;- c(1, 2, 3) length(vektor02) ## [1] 3 Když svážu několik vektorů stejné délky, mám dataframe 2 rozměry: řádky (nrow()) a sloupce (ncol()) z vektorů se stanou sloupce, z prvních hodnot všech vektorů se stane řádek 1 data.frame(sloupec01 = vektor01, sloupec02 = vektor02) ## sloupec01 sloupec02 ## 1 a 1 ## 2 b 2 ## 3 c 3 Složitější Aby 3 kroky výše mohly fungovat, musí se dodržovat pravidla stejnosti – stejná datová třída ve vektorech, stejná délka sloupců v dataframu. List (list()) nic takového dodržovat nemusí, to je prostě jen seznam věcí List může obsahovat různé datové typy, celé objekty, datasety, další listy, cokoliv :). To se někdy hodí, někdy ne. List ze začátku vypadá jako děsivý divoký západ, a někde down the road se z něj stane velkej kámoš, tak se nebát a mít se na pozoru. 3.3.3 Vektory Různé způsoby vytvoření vektoru. Některé způsoby jsou zabalené do závorky – to znamená, že se má objekt po vytvoření zároveň vyjet. a &lt;- c(1, 2, 3, 20) a ## [1] 1 2 3 20 (a &lt;- c(1, 2, 3, 20)) ## [1] 1 2 3 20 (a &lt;- 1:4) ## [1] 1 2 3 4 (a &lt;- seq(from = 5, to = 6, by = 0.1)) ## [1] 5.0 5.1 5.2 5.3 5.4 5.5 5.6 5.7 5.8 5.9 6.0 (a &lt;- seq(from = -10, to = -5, length.out = 10)) ## [1] -10.000000 -9.444444 -8.888889 -8.333333 -7.777778 -7.222222 ## [7] -6.666667 -6.111111 -5.555556 -5.000000 (a &lt;- rep(x = 4, length = 5)) ## [1] 4 4 4 4 4 (a &lt;- rep(4, 5)) ## [1] 4 4 4 4 4 (b &lt;- c(&quot;ab&quot;, &quot;ac&quot;, &quot;ad&quot;)) ## [1] &quot;ab&quot; &quot;ac&quot; &quot;ad&quot; Příklady užitečných funkcí pro práci s vektory - aritmetické operátory: +, -, *, / - logické operátory: &lt;, &gt;, &lt;=, &gt;=, ==, != abc &lt;- c(5, 2, 8, 1, 6, 3, 10, 4) length(abc) ## [1] 8 max(abc) ## [1] 10 min(abc) ## [1] 1 sum(abc) ## [1] 39 cumsum(abc) ## [1] 5 7 15 16 22 25 35 39 mean(abc) ## [1] 4.875 range(abc) ## [1] 1 10 var(abc) ## [1] 9.267857 sd(abc) ## [1] 3.044316 sort(abc) ## [1] 1 2 3 4 5 6 8 10 order(abc) ## [1] 4 2 6 8 1 5 3 7 abc[order(abc)] ## [1] 1 2 3 4 5 6 8 10 Přístup k vektoru přes pozice prvků abc[1] ## [1] 5 abc[4] ## [1] 1 abc[c(1, 3, 5)] ## [1] 5 8 6 abc[-3] ## [1] 5 2 1 6 3 10 4 Přístup k vektoru přes logické podmínky abc &gt; 3 ## [1] TRUE FALSE TRUE FALSE TRUE FALSE TRUE TRUE abc[abc &gt; 3] ## [1] 5 8 6 10 4 which(abc &gt; 3) ## [1] 1 3 5 7 8 def &lt;- seq(from = 0, to = 21, by = 3) abc %in% def ## [1] FALSE FALSE FALSE FALSE TRUE TRUE FALSE FALSE abc[!(abc %in% def)] ## [1] 5 2 8 1 10 4 Odebrání prvku vektoru abc ## [1] 5 2 8 1 6 3 10 4 (abc &lt;- abc[!(abc %in% def)]) ## [1] 5 2 8 1 10 4 3.3.4 Faktory Když se v R mluví o faktorech, nemají se na mysli komponenty ve faktorové analýze, ale speciální datová třída, kde data můžou nabývat pouze předem definovaných kategorií. state &lt;- c(&quot;tas&quot;, &quot;sa&quot;, &quot;qld&quot;, &quot;nsw&quot;, &quot;nsw&quot;, &quot;nt&quot;, &quot;wa&quot;, &quot;wa&quot;, &quot;qld&quot;, &quot;vic&quot;, &quot;nsw&quot;, &quot;vic&quot;, &quot;qld&quot;, &quot;qld&quot;, &quot;sa&quot;, &quot;tas&quot;, &quot;sa&quot;, &quot;nt&quot;, &quot;wa&quot;, &quot;vic&quot;, &quot;qld&quot;, &quot;nsw&quot;, &quot;nsw&quot;, &quot;wa&quot;, &quot;sa&quot;, &quot;act&quot;, &quot;nsw&quot;, &quot;vic&quot;, &quot;vic&quot;, &quot;act&quot;) statef &lt;- factor(state) statef ## [1] tas sa qld nsw nsw nt wa wa qld vic nsw vic qld qld sa tas sa nt wa ## [20] vic qld nsw nsw wa sa act nsw vic vic act ## Levels: act nsw nt qld sa tas vic wa levels(statef) ## [1] &quot;act&quot; &quot;nsw&quot; &quot;nt&quot; &quot;qld&quot; &quot;sa&quot; &quot;tas&quot; &quot;vic&quot; &quot;wa&quot; 3.3.5 Matice a array Vytvoření A &lt;- matrix(2, nrow = 2, ncol = 2) A ## [,1] [,2] ## [1,] 2 2 ## [2,] 2 2 B &lt;- array(rep(1:4, 2), dim = c(2, 2, 2)) B ## , , 1 ## ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 ## ## , , 2 ## ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 Užitečné funkce dim(A) ## [1] 2 2 nrow(A) ## [1] 2 ncol(A) ## [1] 2 rownames(A) ## NULL colnames(A) ## NULL colnames(A) &lt;- c(&quot;Sloupec_Prvni&quot;, &quot;Sloupec_Druhy&quot;) rbind(c(1, 2), A, c(3, 4, 5)) ## Warning in rbind(c(1, 2), A, c(3, 4, 5)): number of columns of result is not a ## multiple of vector length (arg 3) ## Sloupec_Prvni Sloupec_Druhy ## [1,] 1 2 ## [2,] 2 2 ## [3,] 2 2 ## [4,] 3 4 cbind(A, &quot;Sloupec_Treti&quot; = c(1, 2)) ## Sloupec_Prvni Sloupec_Druhy Sloupec_Treti ## [1,] 2 2 1 ## [2,] 2 2 2 A2 &lt;- matrix(1:4, 2, 2) A %*% A2 ## [,1] [,2] ## [1,] 6 14 ## [2,] 6 14 A2 ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 t(A2) ## [,1] [,2] ## [1,] 1 2 ## [2,] 3 4 colMeans(A2) ## [1] 1.5 3.5 colSums(A2) ## [1] 3 7 apply(A2, 1, var) ## [1] 2 2 výběr z matice / pole A2[1, 2] ## [1] 3 A2[1,] ## [1] 1 3 A2[,2] ## [1] 3 4 3.3.6 Data frame Vytvoření dataA &lt;- data.frame(ID=1:10, Pohlavi = rep(c(1, 2), 5), Vybran = rep(c(F, T, F, F, T), 2)) dataA ## ID Pohlavi Vybran ## 1 1 1 FALSE ## 2 2 2 TRUE ## 3 3 1 FALSE ## 4 4 2 FALSE ## 5 5 1 TRUE ## 6 6 2 FALSE ## 7 7 1 TRUE ## 8 8 2 FALSE ## 9 9 1 FALSE ## 10 10 2 TRUE Užitečné funkce – stejé jako pro matici nebo array, k tomu ještě: dataB &lt;- data.frame(ID = 1:6, Vek = c(28, 36, 17, 45, 40, 64)) dataB ## ID Vek ## 1 1 28 ## 2 2 36 ## 3 3 17 ## 4 4 45 ## 5 5 40 ## 6 6 64 dataA &lt;- merge(dataA, dataB, by = &quot;ID&quot;, all = T) dataA ## ID Pohlavi Vybran Vek ## 1 1 1 FALSE 28 ## 2 2 2 TRUE 36 ## 3 3 1 FALSE 17 ## 4 4 2 FALSE 45 ## 5 5 1 TRUE 40 ## 6 6 2 FALSE 64 ## 7 7 1 TRUE NA ## 8 8 2 FALSE NA ## 9 9 1 FALSE NA ## 10 10 2 TRUE NA table(dataA$Pohlavi, dataA$Vybran) ## ## FALSE TRUE ## 1 3 2 ## 2 3 2 xtabs(~ Pohlavi + Vybran, data = dataA) ## Vybran ## Pohlavi FALSE TRUE ## 1 3 2 ## 2 3 2 Výběr z data framu dataA[1, 1] ## [1] 1 dataA[, &quot;Pohlavi&quot;] ## [1] 1 2 1 2 1 2 1 2 1 2 dataA[, &quot;Pohlavi&quot;, drop=FALSE] ## Pohlavi ## 1 1 ## 2 2 ## 3 1 ## 4 2 ## 5 1 ## 6 2 ## 7 1 ## 8 2 ## 9 1 ## 10 2 dataA[order(dataA$Vek),] ## ID Pohlavi Vybran Vek ## 3 3 1 FALSE 17 ## 1 1 1 FALSE 28 ## 2 2 2 TRUE 36 ## 5 5 1 TRUE 40 ## 4 4 2 FALSE 45 ## 6 6 2 FALSE 64 ## 7 7 1 TRUE NA ## 8 8 2 FALSE NA ## 9 9 1 FALSE NA ## 10 10 2 TRUE NA dataA[order(dataA$Vek),][1:3,] ## ID Pohlavi Vybran Vek ## 3 3 1 FALSE 17 ## 1 1 1 FALSE 28 ## 2 2 2 TRUE 36 3.3.7 List Vytvoření ListA &lt;- list(&quot;NasVektor&quot; = abc, &quot;NaseMatice&quot; = A2, &quot;Popisek&quot; = &quot;blabla&quot;) ListA ## $NasVektor ## [1] 5 2 8 1 10 4 ## ## $NaseMatice ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 ## ## $Popisek ## [1] &quot;blabla&quot; Užitečné funkce length(ListA) ## [1] 3 names(ListA) ## [1] &quot;NasVektor&quot; &quot;NaseMatice&quot; &quot;Popisek&quot; summary(ListA) ## Length Class Mode ## NasVektor 6 -none- numeric ## NaseMatice 4 -none- numeric ## Popisek 1 -none- character ListB &lt;- list(&quot;NasVektor&quot; = abc, &quot;NaseMatice&quot; = A2) lapply(ListB, sum) ## $NasVektor ## [1] 30 ## ## $NaseMatice ## [1] 10 sapply(ListB, sum) ## NasVektor NaseMatice ## 30 10 Výběr z listu ListA$Popisek ## [1] &quot;blabla&quot; ListA[[&quot;Popisek&quot;]] ## [1] &quot;blabla&quot; ListA[[1]] ## [1] 5 2 8 1 10 4 ListA[1:2] ## $NasVektor ## [1] 5 2 8 1 10 4 ## ## $NaseMatice ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 3.4 Načtení dat # cestaData&lt;-&quot;m:\\\\AlenaT\\\\SkoleniR\\\\Data&quot; # cestaData&lt;-&quot;c:\\\\prace\\\\SkoleniR\\\\Data&quot; # # paste(cestaData, &quot;hsb.csv&quot;, sep = &quot;\\\\&quot;) # # dat.csv &lt;- read.csv2(paste(cestaData, &quot;hsb.csv&quot;, sep = &quot;\\\\&quot;)) # dat.tab &lt;- read.table(paste(cestaData, &quot;hsb2.txt&quot;,sep = &quot;\\\\&quot;), header = TRUE, sep = &quot;\\t&quot;) # # library(foreign) # dat.spss &lt;- read.spss(paste(cestaData, &quot;hsb2.sav&quot;, sep = &quot;\\\\&quot;), to.data.frame = TRUE) # # dim(dat.csv) # head(dat.csv) # # summary(dat.csv) 3.5 Ukládání dat # write.table(dat.csv, file = paste(cestaData, &quot;hsb2_v02.txt&quot;, sep = &quot;\\\\&quot;), sep = &quot;\\t&quot;, na = &quot;&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
